#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2011  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


import audiotools
import audiotools.cue
import sys
import os
import os.path
import gettext

gettext.install("audiotools", unicode=True)


def has_embedded_cuesheet(audiofile):
    return audiofile.get_cuesheet() is not None

if (__name__ == '__main__'):
    parser = audiotools.OptionParser(
        _(u'%prog [options] [-d directory] <track>'),
        version="Python Audio Tools %s" % (audiotools.VERSION))

    parser.add_option(
        '-V', '--verbose',
        action='store',
        dest='verbosity',
        choices=audiotools.VERBOSITY_LEVELS,
        default=audiotools.DEFAULT_VERBOSITY,
        help=_(u'the verbosity level to execute at'))

    parser.add_option(
        '--cue',
        action='store',
        type='string',
        dest='cuesheet',
        metavar='FILENAME',
        help=_(u'the cuesheet to use for splitting track'))

    conversion = audiotools.OptionGroup(parser, _(u"Encoding Options"))

    conversion.add_option(
        '-t', '--type',
        action='store',
        dest='type',
        choices=audiotools.TYPE_MAP.keys(),
        help=_(u'the type of audio track to convert to'))

    conversion.add_option(
        '-q', '--quality',
        action='store',
        type='string',
        dest='quality',
        help=_(u'the quality to store audio tracks at'))

    conversion.add_option(
        '-d', '--dir',
        action='store',
        type='string',
        dest='dir',
        default='.',
        help=_(u'the directory to store converted audio tracks'))

    conversion.add_option(
        '--format',
        action='store',
        type='string',
        default=None,
        dest='format',
        help=_(u'the format string for new filenames'))

    parser.add_option_group(conversion)

    metadata = audiotools.OptionGroup(parser, _(u"Metadata Options"))

    metadata.add_option(
        '-x', '--xmcd',
        action='store',
        type='string',
        dest='xmcd',
        metavar='FILENAME',
        help=_(u'FreeDB XMCD file or MusicBrainz XML file'))

    #if adding ReplayGain is a lossless process
    #(i.e. added as tags rather than modifying track data)
    #add_replay_gain should default to True
    #if not, add_replay_gain should default to False
    #which is which depends on the track type
    metadata.add_option(
        '--replay-gain',
        action='store_true',
        dest='add_replay_gain',
        help=_(u'add ReplayGain metadata to newly created tracks'))

    metadata.add_option(
        '--no-replay-gain',
        action='store_false',
        dest='add_replay_gain',
        help=_(u'do not add ReplayGain metadata to newly extracted tracks'))

    parser.add_option_group(metadata)

    (options, args) = parser.parse_args()
    msg = audiotools.Messenger("tracksplit", options)

    #get the AudioFile class we are converted to
    if (options.type is not None):
        AudioType = audiotools.TYPE_MAP[options.type]
    else:
        AudioType = audiotools.TYPE_MAP[audiotools.DEFAULT_TYPE]

    #ensure the selected compression is compatible with that class
    if (options.quality == 'help'):
        if (len(AudioType.COMPRESSION_MODES) > 1):
            msg.info(_(u"Available compression types for %s:") % \
                         (AudioType.NAME))
            for mode in AudioType.COMPRESSION_MODES:
                msg.new_row()
                if (mode == audiotools.__default_quality__(AudioType.NAME)):
                    msg.output_column(msg.ansi(mode.decode('ascii'),
                                               [msg.BOLD,
                                                msg.UNDERLINE]), True)
                else:
                    msg.output_column(mode.decode('ascii'), True)
                if (mode in AudioType.COMPRESSION_DESCRIPTIONS):
                    msg.output_column(u" : ")
                else:
                    msg.output_column(u"   ")
                msg.output_column(
                    AudioType.COMPRESSION_DESCRIPTIONS.get(mode, u""))
            msg.info_rows()
        else:
            msg.error(_(u"Audio type %s has no compression modes") % \
                            (AudioType.NAME))
        sys.exit(0)
    elif (options.quality is None):
        options.quality = audiotools.__default_quality__(AudioType.NAME)
    elif (options.quality not in AudioType.COMPRESSION_MODES):
        msg.error(_(u"\"%(quality)s\" is not a supported " +
                    u"compression mode for type \"%(type)s\"") %
                  {"quality": options.quality,
                   "type": AudioType.NAME})
        sys.exit(1)

    if (len(args) != 1):
        msg.error(_(u"You must specify exactly 1 supported audio file"))
        sys.exit(1)

    try:
        audiofile = audiotools.open(args[0])
    except audiotools.UnsupportedFile:
        msg.error(_(u"You must specify exactly 1 supported audio file"))
        sys.exit(1)
    except IOError:
        msg.error(_(u"Unable to open \"%s\"") % (msg.filename(args[0])))
        sys.exit(1)

    if (options.add_replay_gain is None):
        options.add_replay_gain = (
            AudioType.lossless_replay_gain() and
            audiotools.applicable_replay_gain([audiofile]))

    if ((options.cuesheet is None) and (not has_embedded_cuesheet(audiofile))):
        msg.error(_(u"You must specify a cuesheet to split audio file"))
        sys.exit(1)

    base_directory = options.dir
    encoded_filenames = []

    if (options.cuesheet is not None):
        #grab the cuesheet we're using to split tracks
        #(this overrides an embedded cuesheet)
        try:
            cuesheet = audiotools.read_sheet(options.cuesheet)
        except audiotools.SheetException, err:
            msg.error(unicode(err))
            sys.exit(1)
    else:
        cuesheet = audiofile.get_cuesheet()

    if (list(cuesheet.pcm_lengths(audiofile.total_frames()))[-1] <= 0):
        msg.error(_(u"Cuesheet too long for track being split"))
        sys.exit(1)

    #pull initial metadata from the base file, where appropriate
    base_metadata = audiofile.get_metadata()
    if (base_metadata is not None):
        base = audiotools.AlbumMetaData([])
        ISRCs = cuesheet.ISRCs()
        for (i, indexes) in enumerate(cuesheet.indexes()):
            track_metadata = audiotools.MetaData.converted(base_metadata)
            track_metadata.track_name = u""
            track_metadata.track_number = i + 1
            track_metadata.track_total = len(list(cuesheet.indexes()))
            track_metadata.ISRC = ISRCs.get(i + 1, u"")

            base[i + 1] = track_metadata
    else:
        base = audiotools.AlbumMetaData(
            [audiotools.MetaData(track_number=i + 1)
                  for (i, indexes) in enumerate(cuesheet.indexes())])

    #if we're using an XMCD file, use that file for track MetaData
    if (options.xmcd is not None):
        try:
            xmcd = audiotools.read_metadata_file(options.xmcd)
        except audiotools.MetaDataFileException, err:
            msg.error(unicode(err))
            sys.exit(1)
    else:
        xmcd = audiotools.AlbumMetaData(
            [audiotools.MetaData(track_number=i + 1)
                  for (i, indexes) in enumerate(cuesheet.indexes())])

    encoded_files = []
    total_pcm = audiotools.BufferedPCMReader(audiofile.to_pcm())

    try:
        for (i, pcm_frames) in enumerate(
            cuesheet.pcm_lengths(audiofile.total_frames())):
            track_number = i + 1

            metadata = xmcd.get(track_number, None)
            if (metadata is not None):
                metadata.merge(base.get(track_number, None))
            else:
                metadata = base.get(track_number, None)

            filename = os.path.join(
                base_directory,
                AudioType.track_name(file_path=audiofile.filename,
                                     track_metadata=metadata,
                                     format=options.format))

            audiotools.make_dirs(filename)

            progress = audiotools.SingleProgressDisplay(
                msg, msg.filename(filename))

            #FIXME - catch from_pcm errors here
            encoded_files.append(
                AudioType.from_pcm(
                    filename,
                    audiotools.PCMReaderProgress(
                        audiotools.LimitedPCMReader(total_pcm, pcm_frames),
                        pcm_frames,
                        progress.update),
                    options.quality))
            encoded_files[-1].set_metadata(metadata)
            progress.clear()
            msg.info(u"%s -> %s" %
                     (msg.filename(audiofile.filename),
                      msg.filename(filename)))

    except audiotools.UnsupportedTracknameField, err:
        err.error_msg(msg)
        sys.exit(1)
    except audiotools.EncodingError, err:
        msg.error(unicode(err))
        sys.exit(1)

    if (options.add_replay_gain and AudioType.can_add_replay_gain()):
        rg_progress = audiotools.ReplayGainProgressDisplay(
                msg, AudioType.lossless_replay_gain())
        rg_progress.initial_message()
        try:
            #separate encoded files by album_name and album_number
            for album in audiotools.group_tracks(encoded_files):
                #add ReplayGain to groups of files
                #belonging to the same album

                AudioType.add_replay_gain([a.filename for a in album],
                                          rg_progress.update)
        except ValueError, err:
            rg_progress.clear()
            msg.error(unicode(err))
            sys.exit(1)
        rg_progress.final_message()
